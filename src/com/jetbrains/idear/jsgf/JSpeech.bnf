{
  parserClass="com.jetbrains.idear.jsgf.JSpeechParser"
  parserUtilClass="com.jetbrains.idear.jsgf.JSpeechParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="JSpeech"
  psiImplClassSuffix="Impl"
  psiPackage="com.jetbrains.idear.jsgf.psi"
  psiImplPackage="com.jetbrains.idear.jsgf.psi.impl"

  elementTypeHolderClass="com.jetbrains.idear.jsgf.psi.JSpeechTypes"
  elementTypeClass="com.jetbrains.idear.jsgf.JSpeechElementType"
  tokenTypeClass="com.jetbrains.idear.jsgf.JSpeechTokenType"

  psiImplUtilClass="com.jetbrains.idear.jsgf.JSpeechPsiImplUtil"

  tokens = [
      STRING="regexp:[A-Za-z_\-]+\w*"
      NUMBER="regexp:(\+|\-)?\p{Digit}*"
      FLOAT="regexp:(\+|\-)?\p{Digit}*(\.\p{Digit}+)?"

      COMMA=","
      PERIOD="."
      COLON=":"
      SEMICOLON=";"
      EQUALS="="
      BRACE1="{"
      BRACE2="}"
      PAREN1="("
      PAREN2=")"
      BRACKET1="["
      BRACKET2="]"
      BRACKET3="<"
      BRACKET4=">"
      BANG="!"
      OR="|"
      SLASH="/"
      HASH="#"

      PUBLIC="public"
      PRIVATE="private"
      GRAMMAR="grammar"
      VERSION="JSGF V1.0"
    ]
}

grammar ::=
    SelfIdentHeader declaration* ruleDefinition*

ruleDefinition ::=
    scope? rulename '=' ruleExpansion ';'

SelfIdentHeader ::=
    '#JSGF V1.0;'

rulename ::=
    '<' STRING '>' {mixin="com.jetbrains.idear.jsgf.JSpeechNamedElementImpl"
    implements="com.jetbrains.idear.jsgf.JSpeechNamedElement"
    methods=[getName setName getRule setRule getNameIdentifier getPresentation]}

literal ::=
    STRING

declaration ::=
    'grammar' STRING ('.' STRING)*';'

scope ::=
    'private' | 'public'

ruleExpansion ::=
    ruleAlternative ( '|' ruleAlternative )*

ruleAlternative ::=
    Weight? sequenceElement+

Weight ::=
    '/' FLOAT '/'

sequenceElement ::=
    subexpansion

subexpansion ::=
    literal
    | rulename
    | '(' ')'
    | '(' ruleExpansion ')'
    | '[' ruleExpansion ']'